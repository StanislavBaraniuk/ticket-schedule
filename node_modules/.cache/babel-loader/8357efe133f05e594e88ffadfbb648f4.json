{"remainingRequest":"/Users/stanislaw/WebstormProjects/test/node_modules/babel-loader/lib/index.js!/Users/stanislaw/WebstormProjects/test/node_modules/eslint-loader/index.js??ref--13-0!/Users/stanislaw/WebstormProjects/test/src/store-components/TicketLoadVariables.js","dependencies":[{"path":"/Users/stanislaw/WebstormProjects/test/src/store-components/TicketLoadVariables.js","mtime":1546115366348},{"path":"/Users/stanislaw/WebstormProjects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/stanislaw/WebstormProjects/test/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/stanislaw/WebstormProjects/test/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nvar state = {\n  type: 1,\n  from: '',\n  to: '',\n  date: new Date().toJSON().slice(0, 10).replace(/-/g, '-'),\n  list: [{\n    NAME: \"705К Киев-Пассажирский — Пшемысль\",\n    PRICE: 100,\n    FROM: \"Uzhgorod\",\n    TO: \"Kiev\",\n    TYPE: 0,\n    FROM_TIME: \"06:20\",\n    TO_TIME: \"12:10\",\n    WAY_TIME: \"6:10\",\n    STATIONS: [{\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }, {\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }, {\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }, {\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }]\n  }, {\n    NAME: \"705К Киев-Пассажирский — Пшемысль\",\n    PRICE: 100,\n    FROM: \"Uzhgorod\",\n    TO: \"Kiev\",\n    TYPE: 1,\n    FROM_TIME: \"06:20\",\n    TO_TIME: \"12:10\",\n    WAY_TIME: \"6:10\",\n    STATIONS: [{\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }, {\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }, {\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }, {\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }]\n  }, {\n    NAME: \"705К Киев-Пассажирский — Пшемысль\",\n    PRICE: 100,\n    FROM: \"Uzhgorod\",\n    TO: \"Kiev\",\n    TYPE: 0,\n    FROM_TIME: \"06:20\",\n    TO_TIME: \"12:10\",\n    WAY_TIME: \"6:10\",\n    STATIONS: [{\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }, {\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }, {\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }, {\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }]\n  }, {\n    NAME: \"142П Бахмут — Львов\",\n    FROM: \"Lviv\",\n    PRICE: 200,\n    TO: \"Kiev\",\n    TYPE: 1,\n    FROM_TIME: \"6:00\",\n    TO_TIME: \"21:15\",\n    WAY_TIME: \"12:15\",\n    STATIONS: [{\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }, {\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }, {\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }, {\n      TYPE: \"Станція\",\n      NAME: \"Ужгород\"\n    }]\n  }]\n};\nvar getters = {\n  IS_LIST_EMPTY: function IS_LIST_EMPTY(state) {\n    return !(typeof state.list != \"undefined\" && state.list != null && state.list.length != null && state.list.length > 0);\n  },\n  GET_LIST: function GET_LIST(state) {\n    return state.list;\n  },\n  GET_TYPE: function GET_TYPE(state) {\n    return state.type;\n  },\n  GET_FROM: function GET_FROM(state) {\n    return state.from;\n  },\n  GET_TO: function GET_TO(state) {\n    return state.to;\n  },\n  GET_DATE: function GET_DATE(state) {\n    return state.date;\n  }\n};\nvar mutations = {\n  SET_TYPE: function SET_TYPE(state, data) {\n    state.type = data;\n  },\n  SET_FROM: function SET_FROM(state, data) {\n    state.from = data;\n  },\n  SET_TO: function SET_TO(state, data) {\n    state.to = data;\n  },\n  SET_DATE: function SET_DATE(state, data) {\n    state.date = data;\n  },\n  CLEAR_LIST: function CLEAR_LIST(state) {\n    state.list = [];\n  }\n};\nvar actions = {};\nexport default {\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};",{"version":3,"sources":["/Users/stanislaw/WebstormProjects/test/src/store-components/TicketLoadVariables.js"],"names":["state","type","from","to","date","Date","toJSON","slice","replace","list","NAME","PRICE","FROM","TO","TYPE","FROM_TIME","TO_TIME","WAY_TIME","STATIONS","getters","IS_LIST_EMPTY","length","GET_LIST","GET_TYPE","GET_FROM","GET_TO","GET_DATE","mutations","SET_TYPE","data","SET_FROM","SET_TO","SET_DATE","CLEAR_LIST","actions"],"mappings":"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","sourcesContent":["const state = {\n    type: 1,\n    from: '',\n    to: '',\n    date: new Date().toJSON().slice(0,10).replace(/-/g,'-'),\n    list: [\n        {NAME: \"705К Киев-Пассажирский — Пшемысль\", PRICE: 100, FROM: \"Uzhgorod\", TO: \"Kiev\", TYPE: 0, FROM_TIME: \"06:20\", TO_TIME: \"12:10\", WAY_TIME: \"6:10\", STATIONS: [{TYPE: \"Станція\", NAME: \"Ужгород\"}, {TYPE: \"Станція\", NAME: \"Ужгород\"}, {TYPE: \"Станція\", NAME: \"Ужгород\"}, {TYPE: \"Станція\", NAME: \"Ужгород\"}] },\n        {NAME: \"705К Киев-Пассажирский — Пшемысль\", PRICE: 100, FROM: \"Uzhgorod\", TO: \"Kiev\", TYPE: 1, FROM_TIME: \"06:20\", TO_TIME: \"12:10\", WAY_TIME: \"6:10\", STATIONS: [{TYPE: \"Станція\", NAME: \"Ужгород\"}, {TYPE: \"Станція\", NAME: \"Ужгород\"}, {TYPE: \"Станція\", NAME: \"Ужгород\"}, {TYPE: \"Станція\", NAME: \"Ужгород\"}] },\n        {NAME: \"705К Киев-Пассажирский — Пшемысль\", PRICE: 100, FROM: \"Uzhgorod\", TO: \"Kiev\", TYPE: 0, FROM_TIME: \"06:20\", TO_TIME: \"12:10\", WAY_TIME: \"6:10\", STATIONS: [{TYPE: \"Станція\", NAME: \"Ужгород\"}, {TYPE: \"Станція\", NAME: \"Ужгород\"}, {TYPE: \"Станція\", NAME: \"Ужгород\"}, {TYPE: \"Станція\", NAME: \"Ужгород\"}] },\n        {NAME: \"142П Бахмут — Львов\", FROM: \"Lviv\", PRICE: 200, TO: \"Kiev\", TYPE: 1, FROM_TIME: \"6:00\", TO_TIME: \"21:15\", WAY_TIME: \"12:15\", STATIONS: [{TYPE: \"Станція\", NAME: \"Ужгород\"}, {TYPE: \"Станція\", NAME: \"Ужгород\"}, {TYPE: \"Станція\", NAME: \"Ужгород\"}, {TYPE: \"Станція\", NAME: \"Ужгород\"}] }\n    ]\n};\nconst getters = {\n    IS_LIST_EMPTY: state => {\n        return !(typeof state.list != \"undefined\" && state.list != null && state.list.length != null && state.list.length > 0);\n    },\n    GET_LIST: state => {\n        return state.list;\n    },\n    GET_TYPE: state => {\n        return state.type;\n    },\n    GET_FROM: state => {\n        return state.from;\n    },\n    GET_TO: state => {\n        return state.to;\n    },\n    GET_DATE: state => {\n        return state.date;\n    }\n};\nconst mutations = {\n    SET_TYPE (state, data) {\n        state.type =  data;\n    },\n    SET_FROM (state, data) {\n        state.from = data;\n    },\n    SET_TO (state, data) {\n        state.to = data;\n    },\n    SET_DATE (state, data) {\n        state.date = data;\n    },\n    CLEAR_LIST (state) {\n        state.list = [];\n    },\n};\nconst actions = {};\n\nexport default {\n    state,\n    getters,\n    mutations,\n    actions,\n};"]}]}